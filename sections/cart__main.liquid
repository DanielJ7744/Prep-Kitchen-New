{% comment %}
** Cart page - main content area
{% endcomment %}
{%liquid
  assign giftItemCount = 0
  assign mealPlanItemCount = 0
  assign totalEligableItemCount = 0
  for line_item in cart.items
    if line_item.product.type == "Gift Card"
       assign giftItemCount = giftItemCount | plus:line_item.quantity
     elsif line_item.product.type == "Meal Plan"
       assign mealPlanItemCount = mealPlanItemCount | plus:line_item.quantity
     endif
  endfor
  assign totalEligableItemCount = giftItemCount | plus:mealPlanItemCount
 %}

{% assign id = section.id %}
{% comment %}Layout{% endcomment %}
{% assign width = section.settings.width %}
{% assign padding_top = section.settings.padding_top %}
{% assign padding_bottom = section.settings.padding_bottom %}
{% assign animation = section.settings.animation | default: 'none' %}
{% comment %} Advanced {% endcomment %}
{% assign css_class = section.settings.css_class %}
{% assign custom_css = section.settings.custom_css %}

{% comment %} CSS {% endcomment %}
{% style %}
  [data-cart-submit-controls]{
    display: none;
  }
  #shopify-section-{{ id }} {
    padding-top: {{ padding_top }}px;
    padding-bottom: {{ padding_bottom }}px;
    padding-right: 30px;
    padding-left: 30px;
    {% if width == 'wide' %}
    width: 100%;
    {% endif %}
  }
  {%
    render 'css-loop',
    css: custom_css,
    id: id
  %}
  .h_inner {
    display: flex;
    justify-content: space-between;
    align-items: center;
    width: 100%;
  }
{% endstyle %}

{{ "cartStyles.css" | asset_url | stylesheet_tag }}

{% comment %} HTML markup {% endcomment %}
<section class="section">
  <div class="cart-header">
    <h1 class="cart-header__title">{{ section.settings.cart_heading }}</h1>
    <p class="cart-header__continue">
      <a href="{{ section.settings.cart_continue_url }}">{{ section.settings.cart_continue_shopping }}</a>
    </p>
  </div>
</section>

<div class="section">
    {% render 'cart-upsell', blocks: section.blocks, cartItems: cart.items %}  
</div>


<section class="section
        {{ css_class }}
        is-width-{{ width }}"
        {% if animation != "none" %}
          data-scroll-class="{{ animation }}"
        {% endif %}>

  <div class="cart__empty-cart-message {% if cart.item_count > 0 %}is-hidden{% endif %}">
    <div class="column one-whole text-align-center has-padding-top has-padding-bottom">
      <h2 class="quote">{{ 'cart.general.continue_browsing_html' | t }}</h2>
      <a href="{% if cart.items.first.product.collections != blank %}{{ cart.items.first.product.collections.last.url }}{% else %}{{ routes.all_products_collection_url }}{% endif %}" class="action_button continue-button add_to_cart">{{ 'cart.general.continue_shopping_link_html' | t }}</a>
    </div>
  </div>

  <div class="cart__form cart__form--secondary {% if cart.item_count == 0 %}is-hidden{% endif %}"
      data-current-discount="{{ cart.total_discount }}">
    <form action="{{ routes.cart_url }}" method="post" id="checkout_form" class="{% if cart.item_count == 0 %}visuallyhidden{% endif %} quantity-box-enabled-{{ section.settings.display_product_quantity_cart }}">

      <div class="medium-down--hide">
        <div class="cart__headings column">
          <div class="cart__product-title">
            <p>{{'cart.general.products' | t }}</p>
          </div>

          <div class="cart__price-title {% if section.settings.display_product_quantity_cart == false %}no-quantity-box{% endif %}">
            <p>{{'cart.general.price' | t }}</p>
          </div>

          {% if section.settings.display_product_quantity_cart %}
            <div class="cart__quantity-title">
              <p>{{'cart.general.quantity' | t }}</p>
            </div>
          {% endif %}

          <div class="cart__total-title {% if section.settings.display_product_quantity_cart == false %}no-quantity-box{% endif %}">
            <p>{{'cart.general.total' | t }}</p>
          </div>

        </div>
      </div>

      <div class="">
        <div class="">
          {% assign total_saving = 0 %}
          {% for item in cart.items %}
            {%- comment -%}Bold:PO 2.0 - Hybrid Input{%- endcomment -%}
            {%- if item.properties._boldBuilderId  and item.properties._boldVariantIds == null -%}
                <input type="hidden" name="updates[]" id="updates_{{- item.key -}}" class="bold_hidden_input cart__product-qty" value="{{- item.quantity -}}" min="0" data-id="{{- item.key -}}">
                {%- continue -%}
            {%- endif -%}
            
            {% if item.variant.compare_at_price > item.variant.price %}
              {% assign saving = item.variant.compare_at_price | minus: item.variant.price | times: item.quantity %}
              {% assign total_saving = saving | plus: total_saving %}
            {% endif %}

            <div class="cart__card is-align-center" data-cart-item="{{ item.key }}" data-variant-id="{{ item.id }}" data-line-item="{{ forloop.index }}">
              <div class="cart__image">
                <a href="{{ item.url }}" title="{{ item.title | escape }}" class="cart_page_image">
                  {%
                    render 'image-element',
                    image: item.image,
                    alt: item.title,
                    object_fit: true,
                    max_height: 150
                  %}
                </a>
              </div>
              <div class="cart__info">
                <div class="cart__description">
                  <div class="cart__text">
                    <p class="item__title">
                      <a href="{{ item.url }}">{{ item.product.title }}</a>
                    </p>

                    {% unless item.variant.title contains "Title" %}
                      <p class="item__properties">
                        {% for option in item.product.options %}
                          
                          <span>{{ option }}:</span> <span>{{ item.variant.options[forloop.index0] }}</span><br />
                        {% endfor %}
                      </p>
                    {% endunless %}

            {% comment %}
                    {% if item.properties %}
                      <p>
                        {% for p in item.properties %}
                          {% unless p.last == blank %}
                            {% if p.last contains '/uploads/' %}
                              <div>
                                {{ p.first }}: <a class="lightbox" href="{{ p.last }}">{{ 'cart.general.uploaded_file' | t }}</a>
                              </div>
                            {% else %}
                              <div>
                                {{ p.first }}: {{ p.last }}
                              </div>
                            {% endif %}
                          {% endunless %}
                        {% endfor %}
                      </p>
                    {% endif %}
            {% endcomment %}
            
                    <span class="bold_load_cart_item_properties"></span>

                    {% if item.selling_plan_allocation.selling_plan %}
                      <p class="item__selling-plan-name">{{ item.selling_plan_allocation.selling_plan.name }}</p>
                    {% endif %}

                    <div class="remove-item-cart">
                        <a class="cart__remove-btn is-inline-flex is-align-center is-justify-center ajax-cart__delete" data-cart-page-delete data-cart-item-key="{{ item.key }}" data-line-item-key={{ forloop.index }} href="{{ routes.cart_change_url }}?line={{ forloop.index }}&amp;quantity=0" title="{{ 'cart.general.remove' | t }}" >
                          Remove
                        </a>
                      </div>
                  </div>

                  </div>

                <div class="cart__price"><span class="Bold-theme-hook-DO-NOT-DELETE bold_cart_item_price" data-item-key="{{item.key}}" style="display:none !important;"></span>
                  {% if item.line_level_discount_allocations.size < 1 %}
                    <p>
                      {% if item.original_price > 0 %}
                        
                        <span class="money {% if item.original_price < item.variant.compare_at_price %}sale{% endif %}">
                          {%
                            render 'price-element',
                            price: item.original_price
                          %}
                        </span>
                        {% if item.original_price < item.variant.compare_at_price %}
                          <span class="money compare-at-price">
                            {%
                              render 'price-element',
                              price: item.variant.compare_at_price
                            %}
                          </span>
                        {% endif %}
                      {% else %}
                        {{ settings.free_price_text }}
                      {% endif %}
                    </p>
                  {% endif %}

                  {% comment %} Discounts for line items {% endcomment %}
                  {% if item.line_level_discount_allocations.size > 0 %}
                    <p class="sale">
                      <span class="money">
                        {%
                          render 'price-element',
                          price: item.final_price
                        %}
                      </span>
                    </p>
                    {% if item.original_line_price > item.final_line_price %}
                      <s class="original-price">
                        <span class="money">
                          {%
                            render 'price-element',
                            price: item.original_price
                          %}
                        </span>
                      </s>
                    {% endif %}
                    {% for discount_allocation in item.line_level_discount_allocations %}
                      <div class="line-item-discount__container">
                        <p>{{ discount_allocation.discount_application.title }}</p>
                      </div>
                    {% endfor %}
                  {% endif %}

                  {%
                    render 'unit-price',
                    item: item,
                    class: 'cart__unit-price'
                  %}
                </div>

                {% if section.settings.display_product_quantity_cart %}
                  <div class="cart__quantity">
                    <div class="purchase-details__quantity product-quantity-box" data-line-item-key={{ forloop.index }}>
                      {%
                        render 'quantity-box',
                        item: item,
                        size: 'is-medium',
                        variant: item.variant
                      %}
                    </div>
                    <p class="cart__quantity-warning quantity-warning">
                  </div>
                {% endif %}

                <div class="cart__total"><span class="Bold-theme-hook-DO-NOT-DELETE bold_cart_item_total" data-item-key="{{item.key}}" style="display:none !important;"></span>

                  <p>
                    {% if item.final_line_price > 0 %}
                      <span class="money">
                        {%
                          render 'price-element',
                          price: item.final_line_price
                        %}
                      </span>
                    {% else %}
                      {{ settings.free_price_text }}
                    {% endif %}
                  </p>
                </div>
              </div>
            </div>
          {% endfor %}

          <div class="cart__cost-summary container is-flex-column">
            <div class="column eight offset-by-eight medium-down--one-whole">
              {%- if cart.cart_level_discount_applications != blank -%}
                <div class="cart__discounts cart__row">
                  {%- for discount_application in cart.cart_level_discount_applications -%}
                    <div class="cart__row-description">
                      <p class="cart__discount-title">{{- discount_application.title -}}</p>
                    </div>
                    <p class="cart__discount">
                      <span class="money">
                        -
                        {%
                          render 'price-element',
                          price: discount_application.total_allocated_amount
                        %}
                      </span>
                    </p>
                  {%- endfor -%}
                </div>
              {%- endif -%}
              <div class="cart__subtotal-container cart__row">
                <div class="cart__row-description">
                  <p class="h3">{{ 'cart.general.subtotal' | t }}:</p>
                </div>
                <p class="h3 cart__subtotal">
                <span class="Bold-theme-hook-DO-NOT-DELETE bold_cart_total" style="display:none !important;"></span>
  <span class="money">
                    {%
                      render 'price-element',
                      price: cart.total_price
                    %}
                  </span>
                </p>
              </div>
              {% if section.settings.display_savings and total_saving > 0 %}
                <div class="cart__total-savings cart__row">
                  <div class="cart__row-description">
                    <p class="cart">{{ 'layout.general.savings' | t }}:</p>
                  </div>
                  <p class="cart__total-discount">
                    <span class="money">
                      {% assign total_savings = total_saving | plus: cart.total_discount %}
                      {%
                        render 'price-element',
                        price: total_savings
                      %}
                    </span>
                  </p>
                </div>
              {% endif %}
            </div>
          </div>

          <div class="cart-main__bottom">
            <div class="cart-main__bottom--left">
              {% if settings.display_special_instructions %}
                <span class="cart-main__bottom-note">
                    <div class="field" id="checkout-addnote">
                      <label
                        for="note"
                      >
                        {{ 'cart.general.note' | t: shop_name: shop.name }}:
                      </label>
                      <div class="control">
                        <textarea
                          class="textarea"
                          id="note"
                          name="note"
                          rows="3"
                        >
                          {{ cart.note }}
                        </textarea>
                      </div>
                    </div>
                </span>
              {% endif %}

            </div>
            <div class="cart-main__bottom--right">
              <div class="cart__price-breakdown {% if settings.display_tos_checkbox %}js-tos-enabled{% endif %}">
                  {% if section.settings.cart_message != blank %}
                    <div class="cart__cart-message is-flex is-justify-end">
                      {{ section.settings.cart_message }}
                    </div>
                  {% endif %}

                  <div class="cart__checkout-container">
                    <div class="is-flex is-align-right cart__taxes-shipping text-align-right">
                      {%- capture taxes_shipping_checkout -%}
                        {%- if cart.taxes_included and shop.shipping_policy.body != blank -%}
                          {{ 'cart.general.taxes_included_and_shipping_policy_html' | t: link: shop.shipping_policy.url }}
                        {%- elsif cart.taxes_included -%}
                          {{ 'cart.general.taxes_included_but_shipping_at_checkout' | t }}
                        {%- elsif shop.shipping_policy.body != blank -%}
                          {{ 'cart.general.taxes_and_shipping_policy_at_checkout_html' | t: link: shop.shipping_policy.url }}
                        {%- else -%}
                          {{ 'cart.general.tax_and_shipping' | t }}
                        {%- endif -%}
                      {%- endcapture -%}

                      <p class="cart__taxes-shipping-message has-padding-bottom">{{ taxes_shipping_checkout }}</p>
                    </div>
                    <div class="is-flex is-align-center cart__checkout-elements">
                      {% if settings.display_tos_checkbox %}
                        <div class="cart__tos">
                          <div class="field">
                            <label class="tos_label" for="cart_agree">
                              <input type="checkbox" class="tos_agree" id="cart_agree" required />
                              {{ 'cart.general.agree_to_terms_html' | t }}
                            </label>
                            {% if settings.tos_page != blank %}
                              <div class="cart__view-terms-container">
                                <a href="{{ pages[settings.tos_page].url }}" class="text-align-right" target="_blank"  rel="noopener">{{ 'cart.general.view_terms' | t }}</a>
                              </div>
                            {% endif %}
                          </div>
                        </div>
                      {% endif %}
                    </div>

                    <div class="is-flex is-align-center is-justify-end">
                    {% render 'wr-delivery-pickup', cart:cart, totalEligableItemCount:totalEligableItemCount %}
                    </div>
                    
                    <div class="is-flex is-align-center is-justify-end cart__buttons">
                      
                      <div class="cart__checkout" data-cart-submit-controls>
                        <button type="submit" class="button add_to_cart checkout" id="update-cart" name="checkout" value="{{ 'cart.general.checkout' | t }}">
                          {% if settings.show_lock_icon %}
                            {%
                              render 'icon',
                              name: 'lock'
                            %}
                          {% endif %}
                          Checkout | Gift Card
                        </button>
                      </div>
                    </div>
                    {% comment %} <div class="is-flex is-align-center is-justify-end">
                      {% if content_for_additional_checkout_buttons %}
                        <div class="additional-checkout-buttons">
                          {{ content_for_additional_checkout_buttons }}
                        </div>
                      {% endif %}
                    </div> {% endcomment %}
                    {% comment %} <div class="is-flex is-align-center is-justify-end">
                      {% if cart.item_count > 0 %}
                        <div class="cart__featured-links">
                          <a href="{% if cart.items.first.product.collections != blank %}{{ cart.items.first.product.collections.last.url }}{% else %}{{ routes.all_products_collection_url }}{% endif %}">{{ 'cart.general.continue_shopping_link_html' | t }}</a>
                        </div>
                      {% endif %}
                    </div> {% endcomment %}
                  </div>

              </div>

            </div>
          </div>

        </div>
      </div>

      {% if customer %} 
      <input type="hidden" name="cust_id" value="{{customer.id}}">
      <input type="hidden" name="cust_fname" value="{{customer.default_address.first_name}}">
      <input type="hidden" name="cust_lname" value="{{customer.default_address.last_name}}">
      <input type="hidden" name="cust_email" value="{{customer.email}}">
      <input type="hidden" name="cust_mobile" value="{{customer.default_address.phone}}">
      <input type="hidden" name="cust_def_addr[address1]" id="cust_def_address1" value='{{customer.default_address.address1}}'>
      <input type="hidden" name="cust_def_addr[address2]" id="cust_def_address2" value='{{customer.default_address.address2}}'>
      <input type="hidden" name="cust_def_addr[city]" id="cust_def_city" value='{{customer.default_address.city}}'>
      <input type="hidden" name="cust_def_addr[province_code]" id="cust_def_province" value='{{customer.default_address.province_code}}'>
      <input type="hidden" name="cust_def_addr[country_code]" id="cust_def_country" value='{{customer.default_address.country_code}}'>
      <input type="hidden" name="cust_def_addr[zip]" id="cust_def_zip" value='{{customer.default_address.zip}}'>
      
      <input type="hidden" name="attributes[Plan]" id="subscription_plan_shortcode">
      {% endif %}
      <input type="hidden" name="shop_url" id="shop_url" value="{{- shop.permanent_domain -}}">
      <textarea name="cart" id="cart_json" value="{{ cart | json | escape }}" style="display:none;"></textarea>
      
    </form>
  </div>

  {% if settings.enable_shipping_calculator == true %}
    <div class="container">
      <div class="one-whole column">
        {% render 'shipping-calculator' %}
      </div>
    </div>
  {% endif %}

</section>

{% comment %}JavaScript{% endcomment %}
<script
        type="application/json"
        data-section-id="{{ section.id }}"
        data-section-data
        >
  {
    "shipping": {
      "multiple_rates": {{ 'cart.shipping_calculator.multiple_rates' | t: number_of_rates: '*number_of_rates*', address: '*address*', rate: '*rate*' | json }},
        "one_rate": {{ 'cart.shipping_calculator.one_rate' | t: address: '*address*' | json }},
          "no_rates": {{ 'cart.shipping_calculator.no_rates' | t | json }},
            "rate_value": {{ 'cart.shipping_calculator.rate_value' | t: rate_title: '*rate_title*', rate: '*rate*'  | json }}
    }
  }
</script>

<script src="{{ 'z__jsCart.js' | asset_url }}" defer></script>

<script>
  function getCookie(cname) {
    let name = cname + "=";
    let decodedCookie = decodeURIComponent(document.cookie);
    let ca = decodedCookie.split(';');
    for(let i = 0; i <ca.length; i++) {
      let c = ca[i];
      while (c.charAt(0) == ' ') {
        c = c.substring(1);
      }
      if (c.indexOf(name) == 0) {
        return c.substring(name.length, c.length);
      }
    }
    return "";
  }
  $(document).ready(function(){
    var selected_plan_shortcode = getCookie('selected_plan_shortcode');
    if(selected_plan_shortcode!=''){
      document.getElementById('subscription_plan_shortcode').value = selected_plan_shortcode;
    }

    setTimeout(function(){
      if (window.BOLD && BOLD.common && BOLD.common.eventEmitter &&
        typeof BOLD.common.eventEmitter.emit === 'function'){
        BOLD.common.eventEmitter.emit('BOLD_COMMON_cart_loaded');
      }
    },1500);
  });
  
  $customer_last_order_delivery_type = '{{customer.last_order.attributes['Delivery Type']}}';
  $customer_last_order_delivery_subtype = '{{customer.last_order.attributes['Home Delivery Type']}}';
  $customer_last_order_delivery_zip = '{{customer.last_order.shipping_address.zip}}';
  $customer_last_order_note = '{{customer.last_order.note}}';
  
  //$customer_last_order_delivery_type = 'home_delivery';
  //$customer_last_order_delivery_subtype = 'DAYTIMEHD';

  var checkout_form_id = 'checkout_form';
  clearCartAttributes();
  //addShippingMethod("pickup");
  window.CUSTOM_METHOD = window.CUSTOM_METHOD || {}; 
  window.CUSTOM_METHOD.addShippingMethod = addShippingMethod;
  
const reVerifyShippingMethodV2 = async () => {
    return new Promise(async (resolve, reject) => {
        let cartJson = await fetch(window.Shopify.routes.root + 'cart.js').then(response => {
            return response.json();
        }).then(result => {
            return result;
        });
        
        let cartUpdateCalls = [];
        //for (let index = 0; index < cartJson.items.length; index++) {
            let cart_item = cartJson.items[0];
            let props = {};
            if(Object.keys(cart_item?.properties)?.length > 0){
                Object.keys(cart_item?.properties).map((key) => {
                    if(key !== "_shippingMethod"){
                        props[key] = cart_item?.properties[key];
                    }
                });
            }

            cartUpdateCalls.push(fetch('/cart/change.js',{
                    method:"POST",
                    headers:{
                        'Content-Type':"application/json"
                    },
                    body:JSON.stringify({
                        id:String(cart_item?.key),
                        properties:{...props,_shippingMethod:shippingMethod}
                    })
            }));
        //}    
        if(cartUpdateCalls.length === 0){
            reject("No item found in cart to update");
        }
        cartUpdateCalls.length > 0 && await Promise.all(cartUpdateCalls).then(response => {
            return response[0].json();
        }).then(json => {
            resolve(json);
        });
        
    });
}
const checkoutBtn = document.getElementById("checkout-btn-cart");
const checkoutSubmitBtn = document.getElementById("update-cart");
checkoutBtn.addEventListener("click", (e) => {
  if(checkShippingValidation()){
    reVerifyShippingMethodV2().then(response => {
      checkoutSubmitBtn.click(); 
    }).catch(error => {
      //console.log(error);
      checkoutSubmitBtn.click(); 
    });
  }else{
    setTimeout(function(){
      document.getElementById('checkout_form').setAttribute('action','/cart');
    },2000);
  }
});

 async function removeShippingMethod () {
    let cartRes = await fetch('/cart.js');
    if(cartRes.ok && cartRes.status === 200){
      let cartJson = await cartRes.json();
      if(cartJson.items.length > 0){
        let cartUpdateCalls = [];
		
        for(let i=0; i < cartJson.items.length; i++){
            let lineNo = i+1;
            let props = {};    
            if(Object.keys(cartJson.items[i]?.properties)?.length > 0){
                  Object.keys(cartJson.items[i]?.properties).map((key) => {
                      if(key !== "_shippingMethod"){
						 props[key] = cartJson.items[i]?.properties[key];
                      }
                  });
            }
            console.log(props);
            cartUpdateCalls.push(fetch('/cart/change.js',{
             	method:"POST",
               headers:{
               'Content-Type':"application/json"
               },
              body:JSON.stringify({
                id:String(cartJson.items[i]?.variant_id),
                properties:props
              })
            }));
        }
        
        if(cartUpdateCalls?.length > 0){
            let updateCart = await Promise.all(cartUpdateCalls);
        }
      }
    }
  }
 async function addShippingMethod (shippingMethod) {
    //await removeShippingMethod(); 
    let cartRes = await fetch('/cart.js');
    if(cartRes.ok && cartRes.status === 200){
      let cartJson = await cartRes.json();
      if(cartJson.items.length > 0){
        let cartUpdateCalls = [];
        for(let i=0; i < 1; i++){
            let lineNo = i+1;
            cartUpdateCalls.push(fetch('/cart/change.js',{
             	method:"POST",
               headers:{
               'Content-Type':"application/json"
               },
              body:JSON.stringify({
                line:lineNo,
                properties:{
                  ...cartJson.items[i]?.properties,
                    "_shippingMethod":shippingMethod  
                }
              })
            }));
        }
        
        if(cartUpdateCalls?.length > 0){
            let updateCart = await Promise.all(cartUpdateCalls);
        }
      }
    }
  }
  
  async function addBuildYourMealItems(){
    let cartRes = await fetch('/cart.js');
    if(cartRes.ok && cartRes.status === 200){
      let cartJson = await cartRes.json();
      if(cartJson.items.length > 0){
        let buildYourMealProducts = cartJson.items.filter((item) => {
          return item.product_type === 'Custom Meal';
        });
        if(buildYourMealProducts.length > 0){
          let formData = {};
          formData['items'] = [];
          buildYourMealProducts.map((customMeal) => {
            if(customMeal.properties){
              if(customMeal.properties['_boldVariantIds']){
                let customVariants = customMeal.properties['_boldVariantIds'].split(',');
                if(customVariants.length > 0){
                  customVariants.map((variant) => {
                    formData['items'].push({
                      id:variant,
                      quantity:parseInt(customMeal.quantity,10),
                      properties:{
                        _boldBuilderId:customMeal.properties['_boldBuilderId']
                      }
                    });
                  });
                }
              }
            }
          });
          if(formData['items'].length > 0){
            let updateCart = await fetch('/cart/add.js',{
              method:"POST",
              headers:{
                'Content-Type':"application/json"
              },
              body:JSON.stringify(formData)
            });
            let _addedboldItems = await updateCart.json();
            if(_addedboldItems['items'] && formData['items']){
              return _addedboldItems['items'].length === formData['items'].length;
            }
          }
        }
      }
    }
    return false;
  }
  function checkShippingValidation(){
    //var pk_quick_current_html = document.getElementById('pk-quick-checkout-btn').innerHTML;
    //document.getElementById('pk-quick-checkout-btn').innerHTML = 'Loading your custom PK Order...';
    var delivery_type = '';
    if(document.getElementsByClassName('store-pickup')){
      for(var i=0; i<document.getElementsByClassName('store-pickup').length; i++){
        if(document.getElementsByClassName('store-pickup')[i].checked){
          delivery_type = document.getElementsByClassName('store-pickup')[i].value;
        }
      }
    }
    if(document.getElementById('pickup-date') && document.getElementById('pickup-date').value==''){
      swal({
        icon: 'error',
        title: 'Oops...',
        text: 'Please select '+delivery_type.replace('-', ' ')+' date'
      });
      //document.getElementById('pk-quick-checkout-btn').innerHTML = pk_quick_current_html;
      return false;
    }
    if(delivery_type === 'home_delivery'){
      var homeDropZip = document.getElementById('home-dropoff-zip').value;
      var homeZips = JSON.parse(window.sessionStorage.getItem('homeZips'));
      var cartNote = document.getElementById('CartSpecialInstructions');
      if (homeDropZip == '') {
        swal({
          icon: 'error',
          title: 'Oops...',
          text: 'Please enter home zip code',
        });
        //document.getElementById('pk-quick-checkout-btn').innerHTML = pk_quick_current_html;
        return false;
      }else if (homeZips.indexOf(homeDropZip) == -1) {
        swal({
          icon: "info",
          title: "Sorry!",
          text: 'Unfortunately, the zip code ' + homeDropZip + ' is outside of the home delivery area. FedEx Shipping is available.',
        });
        //document.getElementById('pk-quick-checkout-btn').innerHTML = pk_quick_current_html;
        return false;
      } else if ($.trim(cartNote.value) == null || $.trim(cartNote.value) == '') {
        swal({
          icon: "info",
          title: "Sorry!",
          text: 'Please add Special Delivery Instructions (Provide distinguishing marks, apartment name, etc.)',
        });
        //document.getElementById('pk-quick-checkout-btn').innerHTML = pk_quick_current_html;
        return false;
      }
    }else if(delivery_type === 'pickup'){
        let location = document.getElementById('location-add').value;      
        if (location == '') {
          swal({
            icon: 'error',
            title: 'Oops...',
            text: 'Please select ' + delivery_type + ' location',
          });
          //document.getElementById('pk-quick-checkout-btn').innerHTML = pk_quick_current_html;
          return false;
        }
    }
     
    if(!addBuildYourMealItems()){
      swal({
        icon: 'error',
        title: 'Oops...',
        text: 'Your cart has either expired or it has some items with issue; please try to refresh your cart or build your cart again.'
      });
      //document.getElementById('pk-quick-checkout-btn').innerHTML = pk_quick_current_html;
      return false;
    }
    return true;
  }
  function pkQuick(e){
    if(!checkShippingValidation()){
      e.preventDefault();
      return false;
    }
    
    setTimeout(function(){
      var query_string = '';
      if(document.getElementById(checkout_form_id).elements.length>0){
        for(var ele=1; ele<document.getElementById(checkout_form_id).elements.length; ele++){
          var form_elem = document.getElementById(checkout_form_id).elements[ele];
          if(form_elem.hasAttribute("name") && form_elem.getAttribute("name").includes("attributes[") && form_elem.value!=''){
            if(form_elem.tagName.toLowerCase() == 'input' && form_elem.getAttribute("type").toLowerCase()=='radio'){
              
              //if element is radio
              if(form_elem.checked){
                query_string += form_elem.getAttribute("name")+'='+form_elem.value+'&';
              }
            }else if(form_elem.tagName.toLowerCase() == 'input' && form_elem.getAttribute("type").toLowerCase()=='checkbox'){
              //if element is checkbox
              if(form_elem.checked){
                query_string += form_elem.getAttribute("name")+'='+form_elem.value+'&';
              }
            }else{
              //for all remaning elements
              query_string += form_elem.getAttribute("name")+'='+form_elem.value+'&';
            }
            
          }
        }
      }
      
      var xhttp1 = new XMLHttpRequest();
      xhttp1.onreadystatechange = function() {
        if (this.readyState == 4 && this.status == 200) {
          var xhttp = new XMLHttpRequest();
          xhttp.onreadystatechange = function() {
            //console.log(this);
            if (this.readyState == 4 && this.status == 200) {
              document.getElementById('cart_json').value = this.responseText; 

              document.getElementById('checkout_form').action="/a/pk-recharge-checkout/index.php?do=checkout";
              document.getElementById('checkout_form').submit();
            }
          };
          xhttp.open("GET", "/cart.js", true);
          xhttp.send();
        }
      };
      xhttp1.open("POST", "/cart/update.js", true);
      xhttp1.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
      xhttp1.send(query_string);
    },800);
  }
  
  // let checkStorePickupInterval = setInterval(function(){
  //   if(document.getElementsByClassName('store-pickup').length>0){
  //     clearInterval(checkStorePickupInterval);

  //     //remain code
  //     for(var i=0; i<document.getElementsByClassName('store-pickup').length; i++){
  //       document.getElementsByClassName('store-pickup')[i].onclick = function(){
  //       	clearCartAttributes();
  //           //addShippingMethod(event.target.value);
  //       };
  //     }
  //   }
  // }, 1000);
  async function clearCartAttributes(){
    var query_string = '';
    let cartRes = await fetch('/cart.js');
    if(cartRes.ok && cartRes.status === 200){
      let cartJson = await cartRes.json();
      
      if(Object.keys(cartJson.attributes).length>0){
        var attr_keys = Object.keys(cartJson.attributes);
        for(var i=0; i<attr_keys.length; i++){
          query_string += 'attributes['+attr_keys[i]+']=&';
        }
      }
    }
    
    var xhttp1 = new XMLHttpRequest();
    xhttp1.onreadystatechange = function() {
      if (this.readyState == 4 && this.status == 200) {
        
      }
    };
    xhttp1.open("POST", "/cart/update.js", true);
    xhttp1.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
    xhttp1.send(query_string);
  }
  
</script>

{% schema %}

{
"name": "Cart",
"class": "cart-section jsCart jsShippingCalculator",
"settings": [
    {
      "type": "text",
      "id": "cart_heading",
      "label": "Cart Heading",
      "default": "Your cart"
    },
    {
      "type": "text",
      "id": "cart_continue_shopping",
      "label": "Cart Continue Text",
      "default": "Continue shopping"
    },
    {
      "type": "url",
      "id": "cart_continue_url",
      "label": "Cart Continue link"
    },
    {
      "type": "checkbox",
      "id": "display_product_quantity_cart",
      "label": "Show quantity box",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "display_savings",
      "label": "Show total savings",
      "default": true
    },
    {
      "type": "richtext",
      "id": "cart_message",
      "label": "Cart message"
    },
    {
      "type": "header",
      "content": "Upsell"
    },
    {
      "type": "checkbox",
      "id": "upsell",
      "label": "Display Upsell",
      "default": true
    },
    {
      "id": "select_collection",
      "type": "collection",
      "label": "Select Upsell Collection"
    },
    {
      "type": "header",
      "content": "Layout"
    },
    {
      "type": "select",
      "id": "width",
      "label": "Width",
      "default": "standard",
      "options": [
        {
          "value": "standard",
          "label": "Standard"
        },
        {
          "value": "wide",
          "label": "Wide"
        }
      ]
    },
    {
      "type": "range",
      "id": "padding_top",
      "label": "Top spacing",
      "min": 0,
      "max": 80,
      "default": 40,
      "unit": "px"
    },
    {
      "type": "range",
      "id": "padding_bottom",
      "label": "Bottom spacing",
      "min": 0,
      "max": 80,
      "default": 40,
      "unit": "px"
    },
    {
      "type": "header",
      "content": "Advanced",
      "info": "[Learn more](https://help.outofthesandbox.com/hc/en-us/articles/360022329373)"
    },
    {
      "type": "text",
      "id": "css_class",
      "label": "CSS Class"
    },
    {
      "type": "textarea",
      "id": "custom_css",
      "label": "Custom CSS"
    }
  ],
  "blocks": [
    {
      "type": "repeat",
      "name": "Select Upsell Products",
      "settings": [
        {
          "id": "cart_product_name",
          "type": "product",
          "label": "Cart Product"
        },
        {
          "id": "product1",
          "type": "product",
          "label": "Select Product 1"
        },
        {
          "id": "product2",
          "type": "product",
          "label": "Select Product 2"
        },
        {
          "id": "product3",
          "type": "product",
          "label": "Select Product 3"
        },
        {
          "id": "product4",
          "type": "product",
          "label": "Select Product 4"
        },
        {
          "id": "product5",
          "type": "product",
          "label": "Select Product 5"
        }
      ]
    }
  ]
}
{% endschema %}
